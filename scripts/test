#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# Swiss Open Access Repository
# Copyright (C) 2025 RERO+
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.

# COLORS for messages
NC='\033[0m'                    # Default color
INFO_COLOR='\033[1;97;44m'      # Bold + white + blue background
SUCCESS_COLOR='\033[1;97;42m'   # Bold + white + green background
ERROR_COLOR='\033[1;97;41m'     # Bold + white + red background

PROGRAM=`basename $0`
SCRIPT_PATH=$(dirname "$0")

# MESSAGES
msg() {
  echo -e "${1}" 1>&2
}
# Display a colored message
# More info: https://misc.flogisoft.com/bash/tip_colors_and_formatting
# $1: choosen color
# $2: title
# $3: the message
colored_msg() {
  msg "${1}[${2}]: ${3}${NC}"
}

info_msg() {
  colored_msg "${INFO_COLOR}" "INFO" "${1}"
}

error_msg() {
  colored_msg "${ERROR_COLOR}" "ERROR" "${1}"
}

error_msg+exit() {
    error_msg "${1}" && exit 1
}

success_msg() {
  colored_msg "${SUCCESS_COLOR}" "SUCCESS" "${1}"
}

success_msg+exit() {
  colored_msg "${SUCCESS_COLOR}" "SUCCESS" "${1}" && exit 0
}

set -e

SCRIPT_PATH=$(dirname "$0")

source ${SCRIPT_PATH}/functions

# Poetry is a mandatory condition to launch this program!
if [[ -z "${VIRTUAL_ENV}" ]]; then
  message "Launch this script via poetry command: poetry run ${PROGRAM}" "error"
  exit 1
fi

pip_audit_exceptions=""
section "Check vulnerabilities:"
# cryptography 43.0.3  GHSA-79v4-65xg-pq4g 44.0.1
add_exceptions "GHSA-79v4-65xg-pq4g"
# jsonpickle   1.4.2   GHSA-j66q-qmrc-89rx
add_exceptions "GHSA-j66q-qmrc-89rx"
# py           1.11.0  PYSEC-2022-42969
add_exceptions "PYSEC-2022-42969"
# selenium     3.141.0 PYSEC-2023-206      4.14.0
add_exceptions "PYSEC-2023-206"
# selenium     3.141.0 PYSEC-2022-43167    4.0.0
add_exceptions "PYSEC-2022-43167"
# werkzeug     2.2.3   PYSEC-2023-221      2.3.8,3.0.1
add_exceptions "PYSEC-2023-221"
# werkzeug     2.2.3   GHSA-2g68-c3qc-8985 3.0.3
add_exceptions "GHSA-2g68-c3qc-8985"
# werkzeug     2.2.3   GHSA-f9vj-2wh5-fj8j 3.0.6
add_exceptions "GHSA-f9vj-2wh5-fj8j"
# werkzeug     2.2.3   GHSA-q34m-jh98-gwm2 3.0.6
add_exceptions "GHSA-q34m-jh98-gwm2"
PIPAPI_PYTHON_LOCATION=$(which python) pip-audit ${pip_audit_exceptions}


info_msg "Test pydocstyle:"
pydocstyle sonar tests docs
info_msg "Test isort:"
isort --check-only --diff "${SCRIPT_PATH}/.."
info_msg "Test useless imports:"
autoflake -c -r --remove-all-unused-imports --ignore-init-module-imports . &>/dev/null || {
  autoflake --remove-all-unused-imports -r --ignore-init-module-imports .
  exit 1
}
info_msg "Sphinx-build:"
sphinx-build -qnNW docs docs/_build/html
pytest
