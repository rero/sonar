#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# Swiss Open Access Repository
# Copyright (C) 2019 RERO
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

source $(dirname "$0")/functions

set -e

# Poetry is a mandatory condition to launch this program!
if [[ -z "${VIRTUAL_ENV}" ]]; then
  message "Launch this script via poetry command: poetry run ${PROGRAM}" "error"
  exit 1
fi

title "Application setup"

# Size of data to create
size="0"
import=false
fixtures_folder='./data'

# If set to true, data for organisations and users will be erased and base
# fixtures are created.
clear_data=false

while test $# -gt 0; do
    case "$1" in
        --import)
            import=true
            ;;
        --size)
            size="$2"
            shift
            ;;
        --clear-data)
            clear_data=true
            ;;
        *) message "Option $1 not recognized" "error" ;;
    esac
    shift
done

if $clear_data; then
    message "All data will be cleared!" "warning"
fi

if $import; then
    message "Size of import sets is set to \"$size\"" "info"
fi

# Purge celery
section "Purge celery tasks" "info"
celery --app invenio_app.celery purge -f

# Clean redis
section "Clear redis cache" "info"
invenio shell --no-term-title -c "import redis; redis.StrictRedis.from_url(app.config['CACHE_REDIS_URL']).flushall(); print('Cache cleared')"

if [ $clear_data = false ]; then
    fixtures_folder='./data/backups'
    section "Backup of existing data" "info"
    invenio utils export --pid-type org --output-dir "${fixtures_folder}/organisations"
    invenio utils export --pid-type user --output-dir "${fixtures_folder}/users"
fi

section "Clear files" "info"
invenio utils clear-files

section "Initialize database" "info"
invenio db destroy --yes-i-know
invenio db init create

section "Initialize elasticsearch indexes" "info"
invenio index destroy --force --yes-i-know
invenio utils es-init --force # To take templates into account
invenio index queue init purge

# Create admin role to restrict access
section "Create roles for users" "info"
invenio roles create superuser
invenio roles create admin
invenio roles create moderator
invenio roles create submitter
invenio roles create user

section "Initialize access for roles" "info"
invenio access allow superuser-access role superuser
invenio access allow admin-access role superuser
invenio access allow admin-access role admin
invenio access allow admin-access role moderator
invenio access allow admin-access role submitter
message "Done" "success"

# Create a default location for depositing files
section "Create location for storing files" "info"
invenio fixtures deposits create

# Create configurations for OAI harvesting
section "Create configurations for OAI harvesting" "info"
invenio oaiharvester config create data/oai_sources.json

# Create users and organisations
section "Create organisations" "info"
invenio fixtures organisations import "${fixtures_folder}/organisations/data.json"

section "Create users" "info"
invenio fixtures users import "${fixtures_folder}/users/data.json"

# Import rerodoc data
if $import; then
    section "Import sets of data" "info"
    invenio oaiharvester harvest -n rerodoc -q -a max=${size}
fi

message "\nInstallation finished successfully" "success"
