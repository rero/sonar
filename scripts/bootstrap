#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# Swiss Open Access Repository
# Copyright (C) 2021-2025 RERO
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

NC='\033[0m'                    # Default color
INFO_COLOR='\033[1;97;44m'      # Bold + white + blue background
SUCCESS_COLOR='\033[1;97;42m'   # Bold + white + green background
ERROR_COLOR='\033[1;97;41m'     # Bold + white + red background

PROGRAM=`basename $0`

source $(dirname "$0")/functions

set -e

# MESSAGES
msg() {
  echo -e "${1}" 1>&2
}
# Display a colored message
# More info: https://misc.flogisoft.com/bash/tip_colors_and_formatting
# $1: choosen color
# $2: title
# $3: the message
colored_msg() {
  msg "${1}[${2}]: ${3}${NC}"
}

info_msg() {
  colored_msg "${INFO_COLOR}" "INFO" "${1}"
}

error_msg() {
  colored_msg "${ERROR_COLOR}" "ERROR" "${1}"
}

error_msg+exit() {
    error_msg "${1}" && exit 1
}

success_msg() {
  colored_msg "${SUCCESS_COLOR}" "SUCCESS" "${1}"
}

# Displays program name
msg "PROGRAM: ${PROGRAM}"

flags=()
deploy=false
cmd="uv sync --frozen"
ci=false
ui_tgz=""

# uv is a mandatory condition to launch this program!
if [[ -z "${VIRTUAL_ENV}" ]]; then
  error_msg "Launch this script via uv command: uv run ${PROGRAM}"
  exit 1
fi

# Check arguments and options
while test $# -gt 0; do
    case "$1" in
        --ui)
            if [ ! -z "$2" ]; then
              ui_tgz=$2
              shift
            fi
            ;;
        -c|--ci)
          # We are probably running webaction, check for env variables
          ci=true ;;
        --deploy)
            deploy=true
            ;;
        *) error_msg "Option $1 not recognized" ;;
    esac
    shift
done


title "Bootstrap script"

if $deploy ; then
  if ! $ci ; then
    flags=("--no-group dev --group prod")
  fi
else
  if $ci ; then
    cmd="uv sync --upgrade"
  fi
fi

# BOOTSTRAP START
# install the application and all the dependencies
flag="${flags[@]}"
info_msg "Install with command: ${cmd} ${flag}"
${cmd} ${flags[@]}

# Collect static files
info_msg "Collect static files"
invenio collect -v

# Store folder path
assets_folder=$(invenio shell --no-term-title -c "print(app.config.get('WEBPACKEXT_PROJECT_BUILDDIR'))")
static_folder=$(invenio shell --no-term-title -c "print('static_folder:%s' % app.static_folder)"|grep static_folder| cut -d: -f2-)

info_msg "Install assets"

# Remove installed RERO packages (in case they was installed with pack)
rm -rf ${assets_folder}/node_modules/@rero

# Build webpack assets
invenio webpack buildall

if [ ! -z "$ui_tgz" ]; then
  info_msg "Install UI from $ui_tgz"
  npm i $ui_tgz --prefix $assets_folder
fi

# Copy sonar-ui files to static folder to use it with flask-assets
mkdir -p ${static_folder}/sonar-ui
cp -R ${assets_folder}/node_modules/@rero/sonar-ui/dist/sonar/* ${static_folder}/sonar-ui

# Copy worker from pdfjs to avoid a 404 error when previewing PDF files.
cp ${assets_folder}/node_modules/pdfjs-dist/build/pdf.worker.min.mjs ${static_folder}/js/pdfjs/

# Compile translations catalogs
info_msg "Compile translations catalogs"
uv run pybabel compile -d sonar/translations

success_msg "\nBootstrap finished successfully"
